unrolled[[list_name]] <- val
unrolled
})
do.call(c, lapply(unrolled_specs, function(unrolled) {
parse_model_spec(spec = unrolled)
}))
} else if ("children" %in% names(extended_spec)) {
do.call(c, lapply(extended_spec$children, function(child_spec) {
parse_model_spec(spec = child_spec, parent_spec = extended_spec)
}))
} else {
# If some parameters are missing event in
# the last level of child specs, set them to defauls
full_spec <- parse_numeric_params(
numeric_params,
get_extended_spec(extended_spec, default_spec)
)
list(list(
name = do.call(get_name, full_spec),
fit = do.call(create_model, full_spec),
spec = full_spec
))
}
}
parse_model_spec(spec)
}
configs <- load_yaml_configs(config_path)
models <- configs[[1]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
specs
pick <- function (items, param_name) {
sapply(items, function (item) { item[[param_name]] })
}
configs <- load_yaml_configs(config_path)
models <- configs[[1]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
specs
actual <- specs
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
epsilons <- pick(actual, "epsilon")
epsilons_other_than_specified <- setdiff(epsilons, c(11, 12))
expect_equal(0, length(epsilons_other_than_specified))
kernels <- pick(actual, "kernel")
expect_true(all(kernels == 'radial'))
costs <- pick(actual, "cost")
expect_true(all(costs == 13))
epsilons
configs <- load_yaml_configs(config_path)
test_that('the number of models equal to', {
test_that('the specified one if there are enough combinations', {
random_models <- configs[[4]]$datasets_with_models[[1]]$models
expect_equal(5, length(random_models))
})
test_that('the number of combinations if it is smaller', {
random_models <- configs[[5]]$datasets_with_models[[1]]$models
expect_equal(2, length(random_models))
})
})
models <- configs[[6]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
is_value_within_power_range <- function (val, bounds, exp_base) {
exp_base^min(bounds) <= val && val <= exp_base^max(bounds)
}
is_spec_within_power_bounds <- function (spec, constraints = list(), exp_base = 10) {
print(spec)
params_within_bounds <- lapply(names(constraints), function (param) {
bounds <- constraints[[param]]
if (length(bounds) > 1) {
print(paste(param, spec[[param]]))
is_value_within_power_range(spec[[param]], bounds = bounds, exp_base = exp_base)
} else {
almost_equal(spec[[param]], bounds[[1]])
}
})
all(unlist(params_within_bounds))
}
pick <- function (items, param_name) {
sapply(items, function (item) { item[[param_name]] })
}
test_that('random values', {
test_that('within the specified bounds', {
actual <- specs[[1]]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4),
cost = c(5, 6)
)
expect_true(is_spec_within_power_bounds(actual, expected))
})
test_that('being powers of the specified base', {
actual <- specs[[2]]
expected <- list(
gamma = 1,
epsilon = 2,
cost = c(3, 4)
)
expect_true(is_spec_within_power_bounds(actual, expected, exp_base = 2))
})
test_that('preserving exponent step', {
actual <- specs[[3]]
expected <- list(
gamma = 1,
epsilon = 2,
cost = c(1, 9)
)
expect_true(is_spec_within_power_bounds(actual, expected, exp_base = 2))
exponent_remainder <- log2(actual$cost) %% 1
expect_true(almost_equal(exponent_remainder, 0))
})
test_that('preserving exponent step', {
actual <- specs[[3]]
expected <- list(
gamma = 1,
epsilon = 2,
cost = c(1, 9)
)
expect_true(is_spec_within_power_bounds(actual, expected, exp_base = 2))
exponent_remainder <- log2(actual$cost) %% 1
expect_true(almost_equal(exponent_remainder, 0))
})
})
test_that('own non-random values', {
actual <- specs[[4]]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4),
cost = 5
)
expect_true(is_spec_within_power_bounds(actual, expected))
})
test_that('parent non-random values', {
actual <- specs[[5]]
expected <- list(
gamma = 1,
epsilon = c(2, 3),
cost = c(4, 5)
)
expect_true(is_spec_within_power_bounds(actual, expected))
})
test_that('child non-random values', {
actual <- specs[[6]]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4),
cost = 5
)
expect_true(is_spec_within_power_bounds(actual, expected))
})
test_that('parent list values', {
actual <- specs[7:8]
expected <- list(
epsilon = c(3, 4),
cost = c(5, 6)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
gammas <- pick(actual, "gamma")
expect_true(all(gammas == c(1, 2)))
})
test_that('child list values', {
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
costs <- pick(actual, "cost")
expect_true(all(costs == c(5, 6)))
})
test_that('combined parent and child random values', {
actual <- specs[[11]]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4),
cost = c(5, 6)
)
expect_true(is_spec_within_power_bounds(actual, expected))
})
test_that('combined inherited primitive, random, and list values', {
actual <- specs[12:16]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
epsilons <- pick(actual, "epsilon")
epsilons_other_than_specified <- setdiff(epsilons, c(11, 12))
expect_equal(0, length(epsilons_other_than_specified))
kernels <- pick(actual, "kernel")
expect_true(all(kernels == 'radial'))
costs <- pick(actual, "cost")
expect_true(all(costs == 13))
})
actual
actual <- specs[12:16]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
specs_within_power_bounds
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
is_spec_within_power_bounds <- function (spec, constraints = list(), exp_base = 10) {
params_within_bounds <- lapply(names(constraints), function (param) {
bounds <- constraints[[param]]
if (length(bounds) > 1) {
print(paste(param, spec[[param]]))
is_value_within_power_range(spec[[param]], bounds = bounds, exp_base = exp_base)
} else {
almost_equal(spec[[param]], bounds[[1]])
}
})
all(unlist(params_within_bounds))
}
actual <- specs[12:16]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
configs <- load_yaml_configs(config_path)
models <- configs[[6]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
models <- configs[[6]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
is_value_within_power_range <- function (val, bounds, exp_base) {
exp_base^min(bounds) <= val && val <= exp_base^max(bounds)
}
is_spec_within_power_bounds <- function (spec, constraints = list(), exp_base = 10) {
params_within_bounds <- lapply(names(constraints), function (param) {
bounds <- constraints[[param]]
if (length(bounds) > 1) {
print(paste(param, spec[[param]]))
is_value_within_power_range(spec[[param]], bounds = bounds, exp_base = exp_base)
} else {
almost_equal(spec[[param]], bounds[[1]])
}
})
all(unlist(params_within_bounds))
}
pick <- function (items, param_name) {
sapply(items, function (item) { item[[param_name]] })
}
actual <- specs[12:16]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
configs <- load_yaml_configs(config_path)
models <- configs[[6]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
specs
actual <- specs[12:15]
actual
actual <- specs[12:15]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
epsilons <- pick(actual, "epsilon")
epsilons_other_than_specified <- setdiff(epsilons, c(11, 12))
expect_equal(0, length(epsilons_other_than_specified))
kernels <- pick(actual, "kernel")
expect_true(all(kernels == 'radial'))
costs <- pick(actual, "cost")
expect_true(all(costs == 13))
configs <- load_yaml_configs(config_path)
configs <- load_yaml_configs(config_path)
models <- configs[[6]]$datasets_with_models[[1]]$models
specs <- lapply(models, function (model) { model$spec })
actual <- specs[16:23]
actual
actual <- specs[16:23]
expected <- list(
l2 = c(1, 2),
learning_rate = c(5, 6)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
are_value_sets_equal <- function (set1, set2) {
length(setdiff(set1, set2)) == 0
}
is_spec_within_power_bounds <- function (spec, constraints = list(), exp_base = 10) {
params_within_bounds <- lapply(names(constraints), function (param) {
bounds <- constraints[[param]]
if (length(bounds) > 1) {
is_value_within_power_range(spec[[param]], bounds = bounds, exp_base = exp_base)
} else {
almost_equal(spec[[param]], bounds[[1]])
}
})
all(unlist(params_within_bounds))
}
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(spec, param)
expected <- value_sets[[param]]
length(setdiff(actual, expected)) == 0
}))
does_spec_contain_all_values <- function (spec, value_sets) {
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(spec, param)
expected <- value_sets[[param]]
length(setdiff(actual, expected)) == 0
}))
all(subsets_equal)
}
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_subsets <- list(
cost = c(5, 6)
)
expect_true(does_spec_contain_all_values(spec, expected_subsets))
does_spec_contain_all_values <- function (spec, value_sets) {
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(spec, param)
expected <- value_sets[[param]]
print(expected)
print(actual)
length(setdiff(actual, expected)) == 0
}))
all(subsets_equal)
}
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_subsets <- list(
cost = c(5, 6)
)
expected_subsets
expect_true(does_spec_contain_all_values(spec, expected_subsets))
do_specs_contain_all_values <- function (specs, value_sets) {
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(specs, param)
expected <- value_sets[[param]]
print(expected)
print(actual)
length(setdiff(actual, expected)) == 0
}))
all(subsets_equal)
}
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_subsets <- list(
cost = c(5, 6)
)
expect_true(do_specs_contain_all_values(spec, expected_subsets))
do_specs_contain_all_values <- function (specs, value_sets) {
print(specs)
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(specs, param)
expected <- value_sets[[param]]
print(expected)
print(actual)
length(setdiff(actual, expected)) == 0
}))
all(subsets_equal)
}
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_subsets <- list(
cost = c(5, 6)
)
expect_true(do_specs_contain_all_values(actual, expected_subsets))
do_specs_contain_all_values <- function (specs, value_sets) {
subsets_equal <- unlist(lapply(names(value_sets), function (param) {
actual <- pick(specs, param)
expected <- value_sets[[param]]
print(expected)
print(actual)
length(setdiff(actual, expected)) == 0
}))
all(subsets_equal)
}
actual <- specs[7:8]
expected <- list(
epsilon = c(3, 4),
cost = c(5, 6)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_values <- list(
gamma = c(1, 2)
)
expect_true(do_specs_contain_all_values(actual, expected_values))
actual <- specs[9:10]
expected <- list(
gamma = c(1, 2),
epsilon = c(3, 4)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_values <- list(
cost = c(5, 6)
)
expect_true(do_specs_contain_all_values(actual, expected_values))
actual <- specs[12:15]
expected <- list(
gamma = c(1, 10)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_values <- list(
epsilon = c(11, 12),
kernel = c('radial'),
cost = c(13)
)
expect_true(do_specs_contain_all_values(actual, expected_values))
actual <- specs[16:23]
expected <- list(
l2 = c(1, 2),
learning_rate = c(5, 6)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
actual <- specs[16:23]
expected <- list(
l2 = c(1, 2),
learning_rate = c(5, 6)
)
specs_within_power_bounds <- unlist(lapply(actual, function (spec) {
is_spec_within_power_bounds(spec, expected)
}))
expect_true(all(specs_within_power_bounds))
expected_values <- list(
hidden = c('10', '10-5-3'),
epsilon = c(3, 4),
activation = c('relu')
)
expect_true(do_specs_contain_all_values(actual, expected_values))
source('~/Dokumenty/masters-thesis/source/prediction/loaders/test/test_loader.R', echo=TRUE)
source('~/Dokumenty/masters-thesis/source/prediction/loaders/test/test_loader.R', echo=TRUE)
source('~/Dokumenty/masters-thesis/source/prediction/loaders/test/test_loader.R', echo=TRUE)
source('~/Dokumenty/masters-thesis/source/prediction/loaders/test/test_loader.R', echo=TRUE)
source('~/Dokumenty/masters-thesis/source/prediction/loaders/test/test_loader.R', echo=TRUE)
model_names <- c('neural_network_laaaaa', 'svr__sdasdsda', 'regression')
grepl('neural', model_names)
are_models_parallelizable <- function (models) {
model_names <- sapply(models, function (model) { model$name })
# Neural networks are trained, using all available cores
# so other models need to wait
!any(grepl('neural', model_names))
}
?lapply
styler:::style_active_file()
styler:::style_active_file()
plot(seq(1, 1000))
png(filename = 'a.png')
plot(seq(1, 1000))
dev.off()
png(filename = 'a.png')
print(plot(seq(1, 1000)))
dev.off()
